#include <iostream>
#include "Sorting.h"

Sorting::Sorting()
{
  comparisons = 0;

} 
Sorting::~Sorting()
{
  
}

void Sorting::SS(int* array)
{
	int low;
	int tracker;
	for (int i = 0; i < 10000; i++)
	{
		tracker = i;
		for (int j = 10000-1; j > i; j--)
		{
			if (array[j] < array[tracker])
			{
				tracker = j;
			} // if
			comparisons++;
		} // for
		low = array[i];
		array[i] = array[tracker];
		array[tracker] = low;
	} // for
	/*for (int i = 0; i < 10000; i++)
		cout << array[i] << " ";
	cout << endl;
	cout << "Number of comparisons: " << comparisons << endl; */
} // ss

void Sorting::MS(int* array, int beg, int end)
{
	if (beg >= end)
		return;
	int mid = beg + (end - beg)/2;
	MS(array, beg, mid);
	MS(array, mid + 1, end);
	MSPT2(array, beg, mid, end);	
	
/*  for(int i =0; i<10000; i++)
		cout << array[i] << " ";
	cout << endl;
	cout << "Number of comparisons: " << comparisons << endl;*/
} // MS

void Sorting::MSPT2(int* array, int left, int mid, int right)
{
	int length1 = mid - left + 1;
	int length2 = right - mid;

	int * leftArray = new int[length1];
	int * rightArray = new int[length2];

	for (int n = 0; n < length1; n++)
		leftArray[n] = array[left + n];
	for (int n = 0; n < length2; n++)
		rightArray[n] = array[mid + n + 1];
	int i = 0;
	int j = 0;
	int k = 0;
	while (i < length1 && j < length2)
	{
		comparisons++;
		if (leftArray[i] >= rightArray[j])
			array[k++] = rightArray[j++];
		else
			array[k++] = leftArray[i++];
	} // while
	while (i < length1)
		array[k++] = leftArray[i++];
	while (j < length2)
		array[k++] = rightArray[j++];

} // MSPT2

void Sorting::HS(int* array){
  for(int i =0; i<10000; i++)
		cout << array[i] << " ";
	cout << endl;
	cout << "Number of comparisons: " << comparisons << endl;
} // HS


void Sorting::QS1(int* array)
{
  for(int i =0; i<10000; i++)
		cout << array[i] << " ";
	cout << endl;
	cout << "Number of comparisons: " << comparisons << endl;
} // QS1

void Sorting::QS2(int* array)
{
  for(int i =0; i<10000; i++)
		cout << array[i] << " ";
	cout << endl;
	cout << "Number of comparisons: " << comparisons << endl;
} // QS2
